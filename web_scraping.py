# -*- coding: utf-8 -*-
"""Task1_web_scraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iq5gI_3oaE0xCn_8k9hYRTYmIoraq-Ng

1) Importing libraries
"""

import selenium
from selenium import webdriver
import pandas as pd
import time
from tqdm import tqdm
import re
import nltk
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

"""2) Initializing Selenium's class and opening the webpage on Google Chrome"""

browser = webdriver.Chrome('chromedriver.exe')
browser.get('https://mamaearth.in/product-category/beauty')

"""3) Targeting all product cards present on the main page directed by link https://mamaearth.in/product-category/beauty and then picking links (links that will take user to individual pages of those products) from all of them """

product_cards = wbD.find_elements_by_class_name('Flex-sc-1lsr9yp-0.khqiqm')

try:
    list_of_links = []
    for i in range (0,244):
        time.sleep(4)
        link_tag = product_cards[i].find_element_by_tag_name('a')
        href = link_tag.get_property('href')
        list_of_links.append(href)   
except:
    pass

print(list_of_links)

"""4) Getting details related to each product"""

all_details=[]

# one-by-one getting links fetched from each product card
# and going to pages directed by them
for link in tqdm(list_of_links):
    webdriver.get(link)
    time.sleep(3)

    # ..............................................................................
    # detail of price
    try:
        price = ""
        price_info = wbD.find_element_by_class_name("price").text
        price_list = list(price_info)
        for r in range(1,len(price_list)):
            price += price_list[r]
    except:
        price = "none"      

    # ..............................................................................
    # detail of reviews
    try:
        review_list = []
        review_info = wbD.find_elements_by_class_name('ReviewItem_content')
        for review in review_info:
            review = review.text
            review_list.append(review)

        # if no reviews then Review = None
        if len(review_list)>0:
            review = review_list
        else:
            review = "none"
    except:
        review = "none"

    # ..............................................................................
    # detail of category
    try:
        category_info = wbD.find_element_by_xpath('//*[@id="__next"]/div[2]/div[1]/div[2]/a[2]').text
    except:
        category_info = "none"
    
    category = re.sub('[^a-zA-Z]',' ', category_info) 
    category = category.lower()     

    # ..............................................................................
    # detail of rating
    try:
        # use . where there is space
        rating_info = wbD.find_elements_by_class_name('Ratings__Review-sc-15bs9mn-0.jvmtYQ')
        rating_list = []
        # three starting and one last ratings were not needed so we removed them
        for i in range(3, len(rating_info)-1):
            rating = rating_info[i].text
            # removed star from ratings
            rating = rating.splitlines( )[0]
            rating_list.append(rating)

        # if no ratings then rating = None    
        if len(rating_list)>0:
            rating = rating_list
        else:
            rating = "none"
    except:
        rating = "none"

    # ..............................................................................
    # detail of product name
    try:
        prod_name = wbD.find_element_by_class_name('ProductDetails__ProdName-sc-1htzzsm-0.gdpggr').text
        prod_name = re.sub('[^a-zA-Z]',' ', prod_name)   
        prod_name = prod_name.lower() 
        prod_name = prod_name.split()   
        lem = WordNetLemmatizer()
        prod_name = [lem.lemmatize(word) for word in prod_name if not word in set(stopwords.words('english'))] 
        prod_name = [word for word in prod_name if not word in waste]     
        prod_name = " ".join(prod_name)  
        product_name = prod_name
    except:
        product_name = "none"

    # ..............................................................................    
    # detail of size/quantity
    try:
        sizee = ""
        # for "Tea Tree Shampoo for Dandruff Free Hair - 250ml",
        # first check that first character (i.e. 2) of last word (i.e. 250ml) is numeric or not        
        name = wbD.find_element_by_class_name('ProductDetails__ProdName-sc-1htzzsm-0.gdpggr').text
        size = name.split(" ") # O/P:- Tea, Tree, Shampoo, for, Dandruff, Free, Hair, -, 250ml
        vari = size[len(size)-1].split()[0] # O/P:- 250ml
        stringg = list(vari) # O/P:- 2,5,0,ml
        stringgg = stringg[0] # O/P:- 2
        if stringgg.isnumeric() and len(stringg)>1: # Note:- "len(stringg)>1" will check for cases like "Ubtan....Pack of 2"  
            # if first character (i.e. 2) of last word (i.e. 250ml) is numeric, then keep everything except "ml/gm"
            for char in stringg:
                if char.isnumeric():
                    sizee += char
            size = sizee
        # it will output the value "250" for case of "Onion Shampoo for Hair onion Oil and Plant Keratin 250 ml"
        elif size[len(size)-2].isnumeric() and len(size[len(size)-2])>1: # Note:- "len(size[len(size)-2])>1" will check for cases like "Ubtan Facewash for tan removal, Pack Of 2 _ds_" 
            size = size[len(size)-2]
        # for cases like "Tea Tree Face Serum" and "Anti-Pollution Kit", size wil be "None" as no size is mentioned
        else:
            size = "none"  
    except:
        size = "none"

    # ..............................................................................
    # detail of product's ingredient
    replacer = ["('Argan',)", 
                "('Charcoal',)", 
                "('Turmeric',)",
                "('Bhringraj',)",
                "('Niacinamide',)",
                "('Coffee',)",
                "('Retinol',)",
                "('Neem',)",
                "('Saffron',)",
                "('Magnesium',)",
                "('Biotin',)",
                "('Pomegranate',)",
                "('Rice',)", 
                "('Tea Tree',)", 
                "('Cucumber',)", 
                "('Onion',)",
                "('Cocoa',)", 
                "('Milk',)", 
                "('Carrot',)", 
                "('Aloe', 'Vera')", 
                "('Castor', 'Oil')",
                "('Rose', 'Water')",
                "('Tea', 'Tree')",
                "('Coconut', 'Oil')",
                "('Hyaluronic', 'Acid')",
                "('Vitamin', 'C')",
                "('Walnut', 'Beads')",
                "('Apple', 'Cider', 'Vinegar')",
               "('Korean', 'Red', 'Ginseng')",
               "('Himalayan', 'Thermal', 'Water')"]

    punctuation = ["(", ")", "'", ","]

    try:
        ingredient_detail = wbD.find_element_by_class_name("list-content").text
        ingredient_full = ingredient_detail.split(":")[0]
        ingredientt = ingredient_full.split( )
        # lets assume in starting ingredient is "none"
        ingredient = "none"

        for i in range (1, len(ingredientt)+1):
            n_grams = nltk.ngrams(ingredientt, i)
            for gram in n_grams:    
                    gram = str(gram)
                    if gram in replacer:
                        ingredient = ""
                        for g in gram:
                            if g not in punctuation:
                                ingredient += g
        ingredient = re.sub('[^a-zA-Z]',' ', ingredient) 
        ingredient = ingredient.lower() 
    except:
        ingredient = "none"    

    # ..............................................................................

    # details of offer if any
    try:
        offer = wbD.find_element_by_xpath('//*[@id="__next"]/div[2]/div[1]/div[3]/div[2]/div/div[2]/table/tc[3]').text
    except:
        offer = "none"

     # ..............................................................................
    
    temporary_storing ={
    'Product_Name':product_name,
    'Product_Link':link,
    'Rating':rating,
    'Reviews':review,
    'MRP':price,
    'Pack_Size':size,
    'Offers': offer,
    'Product_Category':category,
    'Ingredient':ingredient}
    
    all_details.append(temporary_storing)

"""5) Storing these details in csv format"""

data_table = pd.DataFrame(all_details)
data_table.to_csv('Task1_scrapped_data.csv',index=False)